//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameOfLife.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GameOfLife.Resources.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #.
        /// </summary>
        internal static string AliveCell {
            get {
                return ResourceManager.GetString("AliveCell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ..
        /// </summary>
        internal static string DeadCell {
            get {
                return ResourceManager.GetString("DeadCell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter game field height ({0} - {1} characters long).
        /// </summary>
        internal static string EnterGameFieldHeightInfo {
            get {
                return string.Format(ResourceManager.GetString("EnterGameFieldHeightInfo", resourceCulture), MinimumGameFieldHeight, MaximumGameFieldHeight);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter game field width ({0} - {1} characters long).
        /// </summary>
        internal static string EnterGameFieldWidthInfo {
            get {
                return string.Format(ResourceManager.GetString("EnterGameFieldWidthInfo", resourceCulture), MinimumGameFieldWidth, MaximumGameFieldWidth);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input is not a number!.
        /// </summary>
        internal static string ErrorMessageNotANumber {
            get {
                return ResourceManager.GetString("ErrorMessageNotANumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number too big. Should be smaller than: {0}.
        /// </summary>
        internal static string ErrorMessageNumberTooBig {
            get {
                return ResourceManager.GetString("ErrorMessageNumberTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number too small. Should be bigger than: {0}.
        /// </summary>
        internal static string ErrorMessageNumberTooSmall {
            get {
                return ResourceManager.GetString("ErrorMessageNumberTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current live cell count: {0}.
        /// </summary>
        internal static string GameAliveCellDisplayInfo {
            get {
                return ResourceManager.GetString("GameAliveCellDisplayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current generation: {0}.
        /// </summary>
        internal static string GameGenerationDisplayInfo {
            get {
                return ResourceManager.GetString("GameGenerationDisplayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 33.
        /// </summary>
        internal static ushort GameMinimumConsoleWidth {
            get {
                return ushort.Parse(ResourceManager.GetString("GameMinimumConsoleWidth", resourceCulture));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 35.
        /// </summary>
        internal static ushort MaximumGameFieldHeight {
            get {
                return ushort.Parse(ResourceManager.GetString("MaximumGameFieldHeight", resourceCulture));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 120.
        /// </summary>
        internal static ushort MaximumGameFieldWidth {
            get {
                return ushort.Parse(ResourceManager.GetString("MaximumGameFieldWidth", resourceCulture));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4.
        /// </summary>
        internal static ushort MinimumGameFieldHeight {
            get {
                return ushort.Parse(ResourceManager.GetString("MinimumGameFieldHeight", resourceCulture));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4.
        /// </summary>
        internal static ushort MinimumGameFieldWidth {
            get {
                return ushort.Parse(ResourceManager.GetString("MinimumGameFieldWidth", resourceCulture));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 30.
        /// </summary>
        internal static ushort StandardConsoleHeight {
            get {
                return ushort.Parse(ResourceManager.GetString("StandardConsoleHeight", resourceCulture));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 120.
        /// </summary>
        internal static ushort StandardConsoleWidth {
            get {
                return ushort.Parse(ResourceManager.GetString("StandardConsoleWidth", resourceCulture));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3.
        /// </summary>
        internal static ushort TextHeightInGame {
            get {
                return ushort.Parse(ResourceManager.GetString("TextHeightInGame", resourceCulture));
            }
        }
    }
}
